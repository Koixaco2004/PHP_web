"""
Toxic Comment Classifier API
Model: vanhai123/phobert-vi-comment-4class
"""

from flask import Flask, request, jsonify
from transformers import pipeline
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# T·∫£i model khi server kh·ªüi ƒë·ªông
logger.info("Loading model: vanhai123/phobert-vi-comment-4class")
try:
    classifier = pipeline(
        "text-classification",
        model="vanhai123/phobert-vi-comment-4class"
    )
    logger.info("Model loaded successfully!")
except Exception as e:
    logger.error(f"Failed to load model: {e}")
    classifier = None


@app.route('/health', methods=['GET'])
def health():
    """
    Ki·ªÉm tra tr·∫°ng th√°i server v√† model
    
    Tr·∫£ v·ªÅ tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa server v√† x√°c nh·∫≠n model ƒë√£ ƒë∆∞·ª£c t·∫£i.
    """
    return jsonify({
        'status': 'ok',
        'model_loaded': classifier is not None
    })


@app.route('/classify', methods=['POST'])
def classify():
    """
    Ph√¢n lo·∫°i ƒë·ªô ƒë·ªôc h·∫°i c·ªßa m·ªôt b√¨nh lu·∫≠n
    
    Nh·∫≠n text t·ª´ request, s·ª≠ d·ª•ng model ƒë·ªÉ x√°c ƒë·ªãnh nh√£n (t√≠ch c·ª±c, ti√™u c·ª±c, trung l·∫≠p, ƒë·ªôc h·∫°i)
    v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªõi ƒë·ªô tin c·∫≠y.
    
    Request body:
    {
        "text": "ƒê·ªì kh·ªën n·∫°n!"
    }
    
    Response:
    {
        "success": true,
        "text": "ƒê·ªì kh·ªën n·∫°n!",
        "label": "toxic",
        "score": 0.95,
        "is_toxic": true,
        "all_scores": [...]
    }
    """
    if classifier is None:
        return jsonify({
            'success': False,
            'error': 'Model not loaded'
        }), 500
    
    try:
        data = request.get_json()
        
        if not data or 'text' not in data:
            return jsonify({
                'success': False,
                'error': 'Missing "text" field in request body'
            }), 400
        
        text = data['text']
        
        if not text or not text.strip():
            return jsonify({
                'success': False,
                'error': 'Text cannot be empty'
            }), 400
        
        # G·ªçi model ƒë·ªÉ ph√¢n lo·∫°i text v√† l·∫•y to√†n b·ªô ƒëi·ªÉm s·ªë
        result = classifier(text, top_k=None)
        
        # L·∫•y k·∫øt qu·∫£ d·ª± ƒëo√°n h√†ng ƒë·∫ßu
        top_prediction = result[0]
        label = top_prediction['label']
        score = top_prediction['score']
        
        # X√°c ƒë·ªãnh xem b√¨nh lu·∫≠n c√≥ ƒë·ªôc h·∫°i (LABEL_3) hay kh√¥ng
        is_toxic = label == 'LABEL_3'
        
        # Chuy·ªÉn ƒë·ªïi nh√£n m√¥ h√¨nh th√†nh d·∫°ng d·ªÖ ƒë·ªçc
        label_map = {
            'LABEL_0': 'positive',
            'LABEL_1': 'negative', 
            'LABEL_2': 'neutral',
            'LABEL_3': 'toxic'
        }
        readable_label = label_map.get(label, label)
        
        logger.info(f"Classified: '{text[:50]}...' -> {readable_label} ({score:.4f})")
        
        return jsonify({
            'success': True,
            'text': text,
            'label': readable_label,
            'score': float(score),
            'is_toxic': is_toxic,
            'all_scores': [
                {'label': label_map.get(pred['label'], pred['label']), 'score': float(pred['score'])}
                for pred in result
            ]
        })
        
    except Exception as e:
        logger.error(f"Error during classification: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


@app.route('/batch-classify', methods=['POST'])
def batch_classify():
    """
    Ph√¢n lo·∫°i ƒë·ªô ƒë·ªôc h·∫°i c·ªßa nhi·ªÅu b√¨nh lu·∫≠n c√πng m·ªôt l√∫c
    
    X·ª≠ l√Ω danh s√°ch c√°c text v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√¢n lo·∫°i cho t·ª´ng b√¨nh lu·∫≠n.
    
    Request body:
    {
        "texts": ["comment 1", "comment 2", ...]
    }
    """
    if classifier is None:
        return jsonify({
            'success': False,
            'error': 'Model not loaded'
        }), 500
    
    try:
        data = request.get_json()
        
        if not data or 'texts' not in data:
            return jsonify({
                'success': False,
                'error': 'Missing "texts" field in request body'
            }), 400
        
        texts = data['texts']
        
        if not isinstance(texts, list):
            return jsonify({
                'success': False,
                'error': '"texts" must be an array'
            }), 400
        
        # √Ånh x·∫° nh√£n m√¥ h√¨nh sang d·∫°ng d·ªÖ ƒë·ªçc
        label_map = {
            'LABEL_0': 'positive',
            'LABEL_1': 'negative', 
            'LABEL_2': 'neutral',
            'LABEL_3': 'toxic'
        }
        
        # Ph√¢n lo·∫°i t·ª´ng text trong danh s√°ch
        results = []
        for text in texts:
            if text and text.strip():
                result = classifier(text, top_k=None)
                top_prediction = result[0]
                label = top_prediction['label']
                readable_label = label_map.get(label, label)
                
                results.append({
                    'text': text,
                    'label': readable_label,
                    'score': float(top_prediction['score']),
                    'is_toxic': label == 'LABEL_3'
                })
        
        return jsonify({
            'success': True,
            'results': results
        })
        
    except Exception as e:
        logger.error(f"Error during batch classification: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


if __name__ == '__main__':
    print("=" * 60)
    print("üöÄ Toxic Comment Classifier API")
    print("=" * 60)
    print(f"Model: vanhai123/phobert-vi-comment-4class")
    print(f"Endpoints:")
    print(f"  - GET  /health         : Health check")
    print(f"  - POST /classify       : Classify single comment")
    print(f"  - POST /batch-classify : Classify multiple comments")
    print("=" * 60)
    print(f"Starting server on http://127.0.0.1:5000")
    print("=" * 60)
    
    app.run(host='127.0.0.1', port=5000, debug=False)
